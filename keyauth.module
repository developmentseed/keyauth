<?php

// Time in seconds that a request is valid.
define('KEYAUTH_EXPIRY', 30);
// Hash algorithm to use.
define('KEYAUTH_ALGORITHM', 'sha1');

/**
 * Implementation of hook_cron().
 *
 * Clear old values from the nonce table.
 */
function keyauth_cron() {
  $expiry_time = time() - KEYAUTH_EXPIRY;
  db_query("DELETE FROM {keyauth_timestamp_nonce} WHERE timestamp < '%s'", $expiry_time);
}

/**
 * Implementation of hook_menu().
 */
function keyauth_menu() {
  $items = array();
  $items['admin/build/keys'] = array(
    'title'             => 'Authentication keys',
    'description'       => 'Manage authentication keys.',
    'page callback'     => 'keyauth_admin_keys_list',
    'access arguments'   => array('administer authentication keys'),
    'file'              => 'keyauth.admin.inc',
  );
  $items['admin/build/keys/%'] = array(
    'title'             => 'Edit key',
    'access arguments'   => array('administer authentication keys'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('keyauth_admin_keys_form', 3),
    'file'              => 'keyauth.admin.inc',
    'type'              => MENU_CALLBACK,
  );
  $items['admin/build/keys/%/delete'] = array(
    'access arguments'   => array('administer authentication keys'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('keyauth_admin_keys_delete_confirm', 3),
    'file'              => 'keyauth.admin.inc',
    'type'              => MENU_CALLBACK,
  );
  $items['admin/build/keys/%/generate'] = array(
    'access arguments'   => array('administer authentication keys'),
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('keyauth_admin_keys_generate_confirm', 3),
    'file'              => 'keyauth.admin.inc',
    'type'              => MENU_CALLBACK,
  );
  $items['admin/build/keys/list'] = array(
    'title'             => 'List',
    'type'              => MENU_DEFAULT_LOCAL_TASK,
    'access arguments'   => array('administer authentication keys'),
    'weight'            => -10,
  );
  $items['admin/build/keys/new'] = array(
    'title'             => 'New key',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('keyauth_admin_keys_form', 3),
    'access arguments'   => array('administer authentication keys'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'keyauth.admin.inc',
  );
  $items['admin/build/keys/add'] = array(
    'title'             => 'Add existing key',
    'page callback'     => 'drupal_get_form',
    'page arguments'    => array('keyauth_admin_keys_form', 3),
    'access arguments'   => array('administer authentication keys'),
    'type'              => MENU_LOCAL_TASK,
    'file'              => 'keyauth.admin.inc',
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function keyauth_perm() {
  return array('administer authentication keys');
}

/**
 * Implementation of hook_form_alter().
 */
function keyauth_form_alter(&$form, $form_state, $form_id) {
  if (in_array($form_id, array('FeedsHTTPFetcher_feeds_config_form', 'FeedsPubSubFetcher_feeds_config_form'))) {
    drupal_add_js(drupal_get_path('module', 'keyauth') .'/keyauth.js');
    $configurable = $form['#configurable'];
    keyauth_include();
    drupal_add_js(drupal_get_path('module', 'feeds_ui') .'/feeds_ui.js');
    $form['use_keyauth'] = array(
      '#type' => 'checkbox',
      '#title' => t('Use Key Authentication'),
      '#description' => t('If checked, uses Key Authentication to sign each request URL.'),
      '#default_value' => empty($configurable->config['use_keyauth']) ? FALSE : $configurable->config['use_keyauth'],
    );
    $form['keyauth_public'] = array(
      '#type' => 'select',
      '#title' => t('Public key'),
      '#description' => t('Public authentication key. Go to !keyauth to manage keys.', array('!keyauth' => l(t('Authentication key page'), 'admin/build/keys'))),
      '#default_value' => empty($configurable->config['keyauth_public']) ? '' : $configurable->config['keyauth_public'],
      '#options' => drupal_map_assoc(array_keys(keyauth_all_keys())),
    );
  }
}

/**
 * Implementation of hook_feeds_fetcher_prefetch_alter().
 */
function keyauth_feeds_prefetch_alter(&$source_config, $fetcher) {
  if ($fetcher->config['use_keyauth']) {
    keyauth_include();
    $source_config['source'] = keyauth_sign_url($fetcher->config['keyauth_public'], $source_config['source']);
  }
}

/**
 * Include key auth functions.
 */
function keyauth_include() {
  module_load_include('inc', 'keyauth');
}
